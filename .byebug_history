continue
@raw_request
next
step
options
path
http_method
http_methods
next
options
next
options
step
options.keys
options
step
args
step
continue
next
{ headers: headers, body: body }
url
env["REQUEST_METHOD"].downcase.to_sym
env
url
body
env
continue
headers
body
env["REQUEST_METHOD"]
url
list
help
where
continue
Rack::Request.new(env).query_string
Rack::Request.new(env).body.rewind
Rack::Request.new(env).body.rewing
Rack::Request.new(env).body.read
Rack::Request.new(env).body
Rack::Request.new(env).query_string
Rack::Request.new(env).query
Rack::Request.new(env)
env
continue
env
body
env
exit
backend_url
env
continue
env.keys
env
backend_url
url
continue
headers
continue
env.select { |key, value| true }
headers
continue
env["HTTP_HELLO"]
env.keys
headers
continue
HTTParty.post
HTTParty.methods.sort - methods
# continue
continue
env["REQUEST_METHOD"]
env.keys
continue
Rack::Request.new(env).body.read
Rack::Request.new(env).body.clone.read
Rack::Request.new(env).body.clone
Rack::Request.new(env).body.assert("hello")
Rack::Request.new(env).body.assert
Rack::Request.new(env).body.methods - methods
Rack::Request.new(env).body
Rack::Request.new(env)
env
continue
exit
env.keys.select { |key| key.start_with?("HTTP_") }
env.keys.select { |key| key.starts_with?("HTTP_") }
env.keys
# Rack::Request.new(env).keys
Rack::Request.new(env).keys
Rack::Request.new(env).body.read
Rack::Request.new(env).body.methods - methods
Rack::Request.new(env).body.input
Rack::Request.new(env).body
Rack::Request.new(env).methods.sort - methods
Rack::Request.new(env).methods
Rack::Request.new(env).headers
Rack::Request.new(env).body
Rack::Request.new(env)
continue
env
env.keys
env.methods.sort - methods
lllll
env.methods - methods
env.keys
continue
# env["REQUEST_PATH"]
env["REQUEST_PATH"]
env["REQUEST_URI"]
env.keys
Rack::Request.new(env)
Rack::Request.new(env).body.methods - methods
Rack::Request.new(env).body.methods
Rack::Request.new(env).body
Rack::Request.new(env).body.to_s
Rack::Request.new(env).body
Rack::Request.new(env).headers
Rack::Request.new(env).methods - methods
Rack::Request.new(env)
Rack::Request
env.headers
env["REQUEST_METHOD"]
env.keys
env.request
env.methods - methods
continue
sanitized_headers["content-length"]
sanitized_headers.delete("content-length")
sanitized_headers["content-length"]
sanitized_headers
clear
continue
response.header["Content-Length"]
response.body.size
continue
response.body
continue
response.headers.methods.sort - methods
response.headers.methods - methods
response.headers
exit
Hash[response.headers.to_h.map{ |key, value| [key, value.first]}]
Hash[response.header.to_h.map{ |key, value| [key, value.first]}]
response.headers.to_h.each { |key, value|  value.first }
response.headers.to_h.inject({}) { |memo, (key, value)| memo[key] = value.first; memo }
response.headers.to_h.inject({}) { |memo, (key, value)| memo[key] = value.first }
response.headers.to_h.inject({}) { |memo, (key, value)| value.first }
response.headers.to_h.inject({}) { |memo, key, value| value.first }
response.headers.to_h.map { |key, value| value.first }
response.headers.to_h
continue
response.headers.to_h
response.headers.methods - methods
response.headers
response.headers.class
response.class
